type ParentFunctions = Record<string, (...args: any[]) => Promise<any>>;
interface Options {
    max?: number;
    parentFunctions?: ParentFunctions;
}

declare class Worker<Args extends unknown[], Ret = unknown> {
    constructor(fn: () => (...args: Args) => Promise<Ret> | Ret, options?: Options);
    run(...args: Args): Promise<Ret>;
    stop(): void;
}

declare class WorkerWithFallback<Args extends unknown[], Ret = unknown> {
    constructor(fn: () => (...args: Args) => Promise<Ret> | Ret, options: Options & {
        shouldUseFake: (...args: Args) => boolean;
    });
    run(...args: Args): Promise<Ret>;
    stop(): void;
}

export { type Options, type ParentFunctions, Worker, WorkerWithFallback };
